(defn cons x xs (.concat [x] xs))

(defn concat xs ys (.concat xs ys))

(defn empty xs (== (#length xs) 0))

(defn head xs (nth 0 xs))

(defn last xs (nth (- (#length xs) 1) xs))

(defn tail xs (.slice xs 1))

(defn init xs (.slice xs 0 -1))

(defn each f xs
	(if (empty xs)
		undefined
		((f (head xs))
		 (each f (tail xs)))))

(defn map f xs
	(if (empty xs)
		[]
		(cons (f (head xs)) (map f (tail xs)))))

(defn foldl acc f xs
	(if (empty xs)
		acc
		(foldl (f acc (head xs)) f (tail xs))))

(defn sum xs
	(foldl 0 + xs))

(defn str xs
	(foldl "" + xs))

(defn flatten xs
	(foldl [] concat xs))