(defn cons x xs (.concat [x] xs))

(defn concat xs ys (.concat xs ys))

(defn empty xs (== (#length xs) 0))

(defn head xs (nth 0 xs))

(defn last xs (nth (- (#length xs) 1) xs))

(defn tail xs (.slice xs 1))

(defn init xs (.slice xs 0 -1))

(defn each f xs
	(if (empty xs)
		undefined
		(do (f (head xs))
		 	(each f (tail xs)))))

(defn map f xs
	(if (empty xs)
		[]
		(cons (f (head xs)) (map f (tail xs)))))

(defn filter f xs (match xs
	([] [])
	([x & rest] (if (f x)
				 	(cons x (filter f rest))
					(filter f rest)))))

(defn foldl acc f xs
	(if (empty xs)
		acc
		(foldl (f acc (head xs)) f (tail xs))))

(defn sum xs
	(foldl 0 + xs))

(defn str xs
	(foldl "" + xs))

(defn flatten xs
	(foldl [] concat xs))

(defn any f xs (match xs
	([] false)
	([x & rest] (if (f x)
				 	true
					(any f rest)))))

(defn all f xs (match xs
	([] true)
	([x & rest] (if (f x)
				 	(all f rest)
				 	false))))

(defn find f xs (match xs
	([] null)
	([x & rest] (if (f x)
				 x
				(find f rest)))))

(defn join s xs (match xs
	([]          "")
	([x]         (+ "" x))
	([x & rest] (str [x s (join s rest)]))))

(defn inc a (+ a 1))
(defn dec a (- a 1))

(defn min a b
	(if (<= a b) a b))

(defn max a b
	(if (>= a b) a b))

(defn range start end
	(if (== start end)
		[end]
		(cons start (range (inc start) end))))

(defn insert_at n el xs (match [n xs]
	([_ []] [el])
	([0 [x & rest]] (concat [el x] rest))
	([_ [x & rest]] (cons x (insert_at (dec n) el rest)))))

(defn starts_with s input
	(== (.indexOf input s) 0))