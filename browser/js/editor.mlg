//form generators

(defn gen_pending { t: "pending" })


//helper methods

(defn activate node (merge node { active: "t" }))

(defn deactivate node (merge node { active: "f" }))

(defn is_active el
	(== (#active el) "t"))

(defn activate_nth n els (match [n els]
	([0 []]          [])
	([0 [el & rest]] (cons (activate el) rest))
	([i [el & rest]] (cons el (activate_nth (dec i) rest)))))

(defn deactivate_all els
	(map (merge _ { active: "f" }) els))


(defn update_node node kc
	(merge node
		(match node
			({t: "List" active: "t" els: els sel_el: el_ind}
				(if (any is_active els)
					{ els: (map (update_node _ kc) els) }
					(match kc
						(37 { sel_el: (dec el_ind) })
						(39 { sel_el: (inc el_ind) })
						(38 { active: "f" })
						(40 { els: (activate_nth el_ind els) })
						(32 { els: (concat (deactivate_all els) (activate (gen_pending))) })
						(_  {}))))

			({t: "pending" active: "t"}
				(match (.fromCharCode String kc)
					("'" { t: "Str"  val: "" })
					("[" { t: "Arr"  els: [(activate (gen_pending))] sel_el: 0 })
					("(" { t: "List" els: [(activate (gen_pending))] sel_el: 0 })
					("{" { t: "Obj"  els: [(activate (gen_pending))] sel_el: 0 })
					(num { t: "Num"  val: num })
					(c   { t: "Atom" val: c })))

			(_ (match kc
			 	(38 { active: "f" })
			 	(_  {})))
		)
	)
)



//view and user interaction

(defn update_view ast
	(.text ($ "#ast") (.parse jsDump ast)))

(defn handle_keydown handler key_event
	(if (any (== (#which key_event) _) [37, 39, 38, 40, 32])
		(handler (#which key_event))
		undefined))

(defn handle_keypress handler key_event
	(handler (#which key_event)))

(defn update nodes keycode (
	(set nodes (update_node nodes keycode))
	(update_view nodes)
))

(.ready ($ document) (fn (
	(def nodes { t: "List" els: [(activate (gen_pending))] active: "t" sel_el: 0 })
	(update_view nodes)

	(.keydown  ($ "#input") (handle_keydown  (update nodes _) _))
	(.keypress ($ "#input") (handle_keypress (update nodes _) _))

)))