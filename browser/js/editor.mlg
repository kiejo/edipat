//form generators

(defn gen_root (gen_type_with_els "root" [(gen_pending "...")]))

(defn gen_type_with_val type value { t: type val: value state: "n" active: "f" is_defined: "t" in_scope: [] })
(def gen_pending (gen_type_with_val "pending" _))
(def gen_atom    (gen_type_with_val "Atom" _))
(def gen_num     (gen_type_with_val "Num" _))
(def gen_str     (gen_type_with_val "Str" _))

(defn gen_type_with_els type els { t: type els: els sel_el: 0 state: "n" active: "f" in_scope: [] })
(def gen_list (gen_type_with_els "List" _))
(def gen_arr  (gen_type_with_els "Arr" _))
(def gen_obj  (gen_type_with_els "Obj" _))
(def gen_pair (gen_type_with_els "Pair" _))

//helper methods

(defn activate node (merge node { active: "t" }))

(defn deactivate node (merge node { active: "f" }))

(defn is_active el
	(== (#active el) "t"))

(defn activate_nth n els (match [n els]
	([0 []]          [])
	([0 [el & rest]] (cons (activate el) rest))
	([i [el & rest]] (cons el (activate_nth (dec i) rest)))))

(defn deactivate_all els
	(map (merge _ { active: "f" }) els))

(defn like_list el (any (== el _) ["root" "List" "Arr" "Obj" "Pair"]))

(defn non_active els
	(all (fn el (! (is_active el))) els))

(defn contains_active_elem els (any is_active els))

(defn is_type types el (any (== (#t el) _) types))

(defn is_active_type types el (&& (is_active el) (is_type types el)))

(defn contains_active_type types els
	(any (is_active_type types _) els))

(defn is_real_active el (match el
	((is_active_type ["Atom" "Num" "Str" "pending"] _) true)
	({active: "t" t: (like_list _) els: (non_active)} true)
	(_ false)))

(defn contains_real_active els
	(any (is_real_active _) els))

(defn get_triggered_input node input
	(match [input node]

		([" " {t: "Pair" active: "t" els: [ (is_active_type ["Atom"] _) _ ]}] ["uarr" "rarr" "darr"])
		([" " {t: "Pair" active: "t" els: [ _ (is_real_active _)     ]}]      ["uarr" "uarr" " " ":"])

		([")" {t: "List" active: "t" els: (contains_real_active _)}] ["uarr" "uarr" " "])

		(["ret" {t: (like_list) active: "t" els: (contains_active_type ["Atom" "Num" "Str" "pending" "List"] _)}] ["uarr" " "])
		(["'" {t: (like_list) active: "t" els: (contains_active_type ["Str"] _)}]        ["uarr" " "])

		(["larr" {t: (like_list) active: "t" els: (contains_real_active _)}] ["uarr" "larr" "darr"])
		(["rarr" {t: (like_list) active: "t" els: (contains_real_active _)}] ["uarr" "rarr" "darr"])
		([" "    {t: (like_list) active: "t" els: (contains_real_active _)}] ["uarr" "rarr" "darr"])
		(["del"  {t: (like_list) active: "t" els: [ (is_real_active _) ]}]   ["uarr" "del"])
		(["del"  {t: (like_list) active: "t" els: (contains_real_active _)}] ["uarr" "del"  "darr"])

		([_ {t: (like_list) active: "t" els: (contains_active_elem) sel_el: el_ind}]
			(get_triggered_input (nth el_ind (#els node)) input))

		(_ [input])
))

(defn update_node node input
	(merge node (match node

		({t: (like_list) active: "t" els: (contains_active_elem) sel_el: el_ind}
			{ els: (map (update_node _ input) (#els node)) })

		({t: (like_list) active: "t" els: elems sel_el: el_ind}
			(match input
				("larr" { sel_el: (mod (dec el_ind) (#length (#els node))) })
				("rarr" { sel_el: (mod (inc el_ind) (#length (#els node))) })
				("uarr" (if (== (#t node) "root") {} { active: "f" }))
				("darr" { els: (if (empty elems) [(activate (gen_pending "..."))] (activate_nth el_ind elems)) })
				("del"  { els: (remove_nth   el_ind elems) sel_el: (if (== (#length elems) (inc el_ind)) (max (dec el_ind) 0) el_ind) })
				(" "    { els: (insert_at (inc el_ind) (activate (gen_pending "...")) (deactivate_all elems)) sel_el: (inc el_ind) })
				(_  {})))

		({t: "pending" active: "t" val: value in_scope: defs}
			(match input
				("uarr"    { active: "f" })
				("'"       (activate (gen_str "")))
				("["       (activate (gen_arr  [(activate (gen_pending "..."))])))
				("("       (activate (gen_list [(activate (gen_pending "..."))])))
				("{"       (activate (gen_obj  [(activate (gen_pair [(make_state_pending (activate (gen_atom "key"))) (gen_pending "...")]))])))
				(":"       (activate (gen_pair [(activate (gen_atom "key")) (gen_pending "...")])))
				("tab"     (activate (gen_atom (if (empty defs) value (#name (head (get_completions node defs)))))))
				((is_num)  (activate (gen_num input)))
				((is_atom) (activate (gen_atom input)))))

		({t: "Str" active: "t" val: value}
			(match input
				("uarr" { active: "f" })
				("'"    { active: "f" })
				("bs"   { val: (init value) })
				(c      { val: (+ value c) })))

		({t: "Num" active: "t" val: value}
			(match input
				("uarr"   { active: "f" })
				("bs"     { val: (init value) })
				((is_num) { val: (+ value input) })))

		({t: "Atom" active: "t" state: "pending"}
			(match input
				("uarr"    { active: "f" })
				((is_atom) { val: input state: "n"})))

		({t: "Atom" active: "t" val: value in_scope: defs}
			(match input
				("uarr"    { active: "f" })
				("bs"      (if (== (#length (init value)) 0) (activate (gen_pending "...")) { val: (init value) }))
				("tab"     { val: (if (empty defs) value (#name (head (get_completions node defs)))) })
				((is_atom) { val: (+ value input) })))

		(_ {})
	))
)

(defn update_node_multi node keycodes
	(foldl node update_node keycodes))

(defn make_state_pending el
	(merge el (match el
		({els: elems} { state: "pending" els: (map (make_state_pending _) elems) })
		({}           { state: "pending" }))))


//check if vars and fns are defined, generate autocompletions for active node

(defn is_state_pending el (== (#state el) "pending"))

(defn is_def el (match el
	({t: "Atom" val: "def"}  true)
	({t: "Atom" val: "defn"} true)
	(_ false)
))

(defn get_def el (match el
	({t: "List" els: [(is_def) {t: "Atom" val: name state: "n"} & rest]}
		{name: name gen: (map (fn arg (gen_pending (#val arg))) (init rest))})
	(_ null)
))

(defn get_defs els (filter (!= null _) (map get_def els)))

(defn filter_defs node defs (match node
	({t: "pending"}     defs)
	({state: "pending"} defs)
	(_ (filter (fn form (starts_with (#val node) (#name form))) defs))
))

(defn get_completions node (match node
	((is_real_active) (filter_defs node (|| (#in_scope node) [])))
	({t: (like_list) active: "t" els: elems sel_el: sel_ind} (get_completions (nth sel_ind elems)))
	(_ [])
))

(defn check_defs_multi nodes defs
	(map (fn node (check_defs node (concat defs (get_defs (filter (!= node _) nodes))))) nodes))

(defn check_defs node defs
	(merge node (match node
		({t: "root" els: elems}
			{ els: (check_defs_multi elems defs) })

		({t: "List" active: "t" els: [ { t: "Atom" val: name active: "t" } & (all (is_state_pending _) _) ]}
			(match (get_form name defs)
				({gen: items} { els: (cons (merge (head (#els node)) { in_scope: defs is_defined: "t" }) (map (make_state_pending _) items)) })
				(_            { els: [     (merge (head (#els node)) { in_scope: defs is_defined: "f" })] })))

		({t: "List" els: [{t: "Atom" val: "do"} & rest]}
			{ els: (cons (head (#els node)) (check_defs_multi rest defs)) })

		({t: "List" els: [{t: "Atom" val: "defn"} & rest]}
			{ els: (concat (map (merge _ {is_defined: "t"}) (init (#els node)))
						   [(check_defs (last rest) (concat defs (map (fn el {name: (#val el) gen: []}) (init rest))))]) })

		({t: "List" els: [{t: "Atom" val: "def"} {t: "Atom" val: name} body]}
			{ els: (concat (map (merge _ {is_defined: "t"}) (take 2 (#els node)))
						   (check_defs body defs)) })

		({t: (fn t (any (== t _) ["Atom" "pending"])) active: act val: name state: "n"}
			(match (get_form name defs)
				({gen: _} { in_scope: (if (== act "t") defs []) is_defined: "t" })
				(_        { in_scope: (if (== act "t") defs []) is_defined: "f" })))

		({t: "Pair" els: [key value]}
			{ els: [key (check_defs value defs)] })

		({t: (like_list) els: elems}
			{ els: (map (check_defs _ defs) elems) })

		(_ {})
	))
)

//special forms
(def special_forms [
	{ name: "def"  gen: [ (gen_atom "name") (gen_pending "value") ] }
	{ name: "set"  gen: [ (gen_atom "name") (gen_pending "value") ] }
	{ name: "defn" gen: [ (gen_atom "name") (gen_atom "arg1") (gen_pending "body") ] }
	{ name: "fn"   gen: [ (gen_atom "arg1")  (gen_pending "body") ] }
	{ name: "if"   gen: [ (gen_pending "cond") (gen_pending "else") (gen_pending "else") ] }
	{ name: "nth"  gen: [ (gen_pending "index") (gen_pending "array") ] }
	{ name: "do"   gen: [ (gen_list [(gen_pending "...")]) ] }

	{ name: "match" gen: [ (gen_pending "value") (gen_list [(gen_pending "patt") (gen_pending "expr")]) ] }
])

(def built_in_binops
	(map (fn op { name: op gen: [ (gen_pending "a") (gen_pending "b") ]}) [ "+" "-" "*" "/" "%" "==" "!=" ">" ">=" "<" "<=" "&&" "||" ]))


(defn get_form name forms
	(find (fn form (== (#name form) name)) forms))


//renderer

(defn gen_active_class node
	(str ["active_" (is_real_active node)]))

(defn prepare_render node
	(merge node (match node

		({t: (like_list) els: elems}
			{ classes: [(gen_active_class node)] els: (map prepare_node elems) })

		(_ { classes: [(gen_active_class node)] })
	))
)

(defn render node (match node

	({t: "root" els: elems}
		(join "<br/>" (map render elems)))

	({t: "List" active: "t" els: (non_active)}
		(wrap_span (str ["(" (join " " (map render (#els node))) ")"]) "act_t"))

	({t: "List" els: elems}
		(str ["(" (join " " (map render elems)) ")"]))

	({t: "Arr" els: elems}
		(str ["[" (join " " (map render elems)) "]"]))

	({t: "Obj" els: elems}
		(str ["{ " (join " " (map render elems)) " }"]))

	({t: "Str" } (str ["'" (render_primitive node) "'"]))

	({t: "Pair" els: [k v]} (str [(render k) ": " (render v)]))

	(el (render_primitive el))
))

(defn get_classes prim (match prim
	({t: type, active: act state: st is_defined: is_def} [(str ["type_" type]) (str ["act_" act]) (str ["st_" st]) (str ["is_def_" is_def])])
	(_ [])))

(defn render_primitive prim
	(wrap_span (#val prim) (join " " (get_classes prim))))

(defn wrap_span cont cl (str ["<span class='" cl "'>" cont "</span>"]))


//view and user interaction

(def root_node (activate (gen_root)))

(defn update_view node (do
	(.text ($ "#ast") (.parse jsDump node))
	(.html ($ "#rendered") (render node))
))

(defn update_view_compl completions (do
	(.html ($ "#completions") (join ", " (map (fn el (#name el)) completions)))
))

(defn update node input (do
	(set root_node (check_defs (update_node_multi node (get_triggered_input node input)) (foldl [] concat [special_forms built_in_binops])))
	(update_view root_node)

	(update_view_compl (get_completions root_node))
))


//input handling

(defn is_num input (any (== input _) (map (fn n (.toString n)) (range 0 9))))

(defn is_atom input (! (any (fn pair (match pair ([_ s] (== s input)))) special_input)))


//make sure input only triggers one of the two possible events and normalize keycode to string/char

(def special_input [
	[8  "bs"]
	[13 "ret"]
	[37 "larr"]
	[38 "uarr"]
	[39 "rarr"]
	[9  "tab"]
	[40 "darr"]
	[46 "del"]
])

(defn kd_keycode_to_s pairs kc
	(match (find (fn pair (match pair ([code s] (== code kc)))) pairs)
		([_ s] s)
		(_     "not_matched")))

//handle special keys (eg arr, tab)
(defn handle_keydown handler key_event
	(match (kd_keycode_to_s special_input (#which key_event))
		("not_matched" undefined)
		(s (do
			(handler s)
			(.preventDefault key_event)))))

//handle characters
(defn handle_keypress handler key_event (do
	(handler (.fromCharCode String (#which key_event)))
	(.preventDefault key_event)
))

(.ready ($ document) (fn (do

	(update root_node "darr") //activate first child

	(.keydown  ($ "#rendered") (handle_keydown  (update root_node _) _)) //triggered for every key
	(.keypress ($ "#rendered") (handle_keypress (update root_node _) _)) //only guaranteed for characters

	(.focus ($ "#rendered"))

)))