//form generators

(defn gen_root { t: "List" els: [(gen_pending)] active: "t" sel_el: 0 } )

(defn gen_pending { t: "pending" })


//helper methods

(defn activate node (merge node { active: "t" }))

(defn deactivate node (merge node { active: "f" }))

(defn is_active el
	(== (#active el) "t"))

(defn activate_nth n els (match [n els]
	([0 []]          [])
	([0 [el & rest]] (cons (activate el) rest))
	([i [el & rest]] (cons el (activate_nth (dec i) rest)))))

(defn remove_nth n els (match [n els]
	([0 []]          [])
	([0 [el & rest]] rest)
	([i [el & rest]] (cons el (remove_nth (dec i) rest)))))

(defn deactivate_all els
	(map (merge _ { active: "f" }) els))

(defn like_list el (any (== el _) ["List" "Arr" "Obj" "Pair"]))

(defn is_num el (any (== el _) (map (fn n (.toString n)) (range 0 9))))

(defn contains_active_elem els (any is_active els))

(defn contains_active_type type
	(any (fn el (&& (== (#t el) type) (is_active el))) _))

(defn contains_active_atom (contains_active_type "Atom"))
(defn contains_active_str  (contains_active_type "Str"))
(defn contains_active_num  (contains_active_type "Num"))
(defn contains_active_num  (contains_active_type "List"))

(defn get_triggered_keycodes node kc
	(match [kc (.fromCharCode String kc) node]
		([32 _   {t: "List" active: "t" els: (contains_active_atom)}] [38 32])
		([32 _   {t: "List" active: "t" els: (contains_active_num)}]  [38 32])
		([_  "'" {t: "List" active: "t" els: (contains_active_str)}]  [38 32])

		([46 _   {t: "List" active: "t" els: (contains_active_atom)}] [38 46 40])

		(_ [kc])
))

(defn update_node node kc
	(merge node (match node

		({t: (like_list) active: "t" els: (contains_active_elem) sel_el: el_ind}
			{ els: (map (update_node _ kc) (#els node)) })

		({t: (like_list) active: "t" els: elems sel_el: el_ind}
			(match kc
				(37 { sel_el: (dec el_ind) })
				(39 { sel_el: (inc el_ind) })
				(38 { active: "f" })
				(40 { els: (activate_nth el_ind elems) })
				(46 { els: (remove_nth   el_ind elems) sel_el: (if (== (#length elems) (inc el_ind)) (dec el_ind) el_ind) })
				(32 { els: (concat (deactivate_all elems) (activate (gen_pending))) sel_el: (inc el_ind) })
				(_  {})))

		({t: "pending" active: "t"}
			(match (.fromCharCode String kc)
				("'"      { t: "Str"  val: "" })
				("["      { t: "Arr"  els: [(activate (gen_pending))] sel_el: 0 })
				("("      { t: "List" els: [(activate (gen_pending))] sel_el: 0 })
				("{"      { t: "Obj"  els: [(activate (gen_pending))] sel_el: 0 })
				(":"      { t: "Pair" els: [(activate { t: "Atom" val: "" }) (gen_pending)] sel_el: 0 })
				((is_num) { t: "Num"  val: (.fromCharCode String kc) })
				(c        { t: "Atom" val: c })))

		({t: "Str" active: "t" val: value}
			(match [(.fromCharCode String kc) kc]
				([_  38] { active: "f" })
				(["'" _] { active: "f" })
				([_   8] { val: (init value) })
				([c   _] { val: (+ value c) })))

		({t: "Num" active: "t" val: value}
			(match [(.fromCharCode String kc) kc]
				([_       38] { active: "f" })
				([_        8] { val: (init value) })
				([(is_num) _] { val: (+ value (.fromCharCode String kc)) })))

		({t: "Atom" active: "t" val: value}
			(match [(.fromCharCode String kc) kc]
				([_   38] { active: "f" })
				([_    8] { val: (init value) })
				([c    _] { val: (+ value c) })))

		(_ (match kc
		 	(38 { active: "f" })
		 	(_  {})))
	))
)

(defn update_node_multi node keycodes
	(foldl node update_node keycodes))

//renderer

(defn render node (match node
	({t: "List" els: elems sel_el: sel_ind active: act}
		(str ["(" (join " " (map render elems)) ")"]))

	({t: "Arr" els: elems sel_el: sel_ind}
		(str ["[" (join " " (map render elems)) "]"]))

	({t: "Obj" els: elems sel_el: sel_ind}
		(str ["{ " (join " " (map render elems)) " }"]))

	({t: "Pair" els: [k v]} (str [(render k) ": " (render v)]))

	({t: "Num" val: value  active: act} (render_active value act))

	({t: "Str" val: value  active: act} (str ["'" (render_active value act) "'"]))

	({t: "Atom" val: value  active: act} (render_active value act))

	({t: "pending" active: act} (render_active "..." act))

))

(defn render_active s is_active
	(if (== is_active "t")
		(wrap_span s "active")
		s))

(defn wrap_span cont cl (str ["<span class='" cl "'>" cont "</span>"]))


//view and user interaction

(def root_node (gen_root))

(defn update_view node (
	(.text ($ "#ast") (.parse jsDump node))
	(.html ($ "#rendered") (render node)))
)

(defn handle_keydown handler key_event
	(if (any (== (#which key_event) _) [8 37 39 38 40 46])
		(handler (#which key_event))
		undefined))

(defn handle_keypress handler key_event
	(handler (#which key_event)))

(defn update node keycode (
	(set root_node (update_node_multi node (get_triggered_keycodes node keycode)))
	(update_view root_node)
))

(.ready ($ document) (fn (

	(update root_node 40) //activate first child

	(.keydown  ($ "#input") (handle_keydown  (update root_node _) _))
	(.keypress ($ "#input") (handle_keypress (update root_node _) _))

)))